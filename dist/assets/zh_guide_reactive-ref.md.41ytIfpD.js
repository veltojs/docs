import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.DsCIUHsX.js";const c=JSON.parse('{"title":"ref","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/reactive-ref.md","filePath":"zh/guide/reactive-ref.md"}'),l={name:"zh/guide/reactive-ref.md"};function h(n,s,p,k,d,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">​</a></h1><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><p><code>ref</code> 是 <code>velto</code> 响应式系统中创建基本响应式数据的核心函数。它将任意值包装为一个响应式对象，使得读取和修改 <code>.value</code> 会自动建立依赖并触发响应。</p><h2 id="创建响应式值" tabindex="-1">创建响应式值 <a class="header-anchor" href="#创建响应式值" aria-label="Permalink to &quot;创建响应式值&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count.value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改值（需使用 setValue）</span></span></code></pre></div><blockquote><p>⚠️ <strong>注意</strong> 在当前实现中，不能直接通过 <code>count.value = 10</code> 修改，必须使用 <code>setValue()</code> 方法。</p></blockquote><h2 id="响应行为说明" tabindex="-1">响应行为说明 <a class="header-anchor" href="#响应行为说明" aria-label="Permalink to &quot;响应行为说明&quot;">​</a></h2><ol><li>读取值时</li></ol><p>当访问 <code>ref.value</code> 时，会调用 <code>get value()</code>，并执行：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trackEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(activeEffect, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>这会注册当前活跃的副作用（如组件渲染函数、watch 回调）为依赖。</p><ol start="2"><li>设置值时</li></ol><p>当调用 <code>setValue(newVal)</code> 时，内部会执行：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">triggerEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dep);</span></span></code></pre></div><p>这会触发所有依赖于该 ref 的副作用更新。</p><h2 id="与-watch-一起使用" tabindex="-1">与 <code>watch</code> 一起使用 <a class="header-anchor" href="#与-watch-一起使用" aria-label="Permalink to &quot;与 \`watch\` 一起使用&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, watch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@velto/runtime&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`msg changed: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oldVal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} → \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newVal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><table tabindex="0"><thead><tr><th>限制</th><th>描述</th></tr></thead><tbody><tr><td>修改方式</td><td>必须使用 <code>.setValue()</code> 方法来更新值，直接赋值 <code>.value = ...</code> 无效（当前实现不支持 setter）</td></tr><tr><td>类型定义</td><td><code>ref&lt;T&gt;()</code> 会返回 <code>Ref&lt;T&gt;</code>，<code>.value</code> 是实际值</td></tr></tbody></table><h2 id="内部结构分析-源码对应" tabindex="-1">内部结构分析（源码对应） <a class="header-anchor" href="#内部结构分析-源码对应" aria-label="Permalink to &quot;内部结构分析（源码对应）&quot;">​</a></h2><ul><li><code>ref(value)</code> 实际创建了 <code>Ref</code> 实例；</li><li><code>Ref</code> 内部使用 <code>dep</code> 来存储所有依赖；</li><li><code>get value()</code> 建立依赖；</li><li><code>setValue()</code> 触发依赖更新；</li><li>标记 <code>this[ReactiveFlags.IS_REF] = true</code>，供外部识别是否是 <code>ref</code>。 |</li></ul>`,21)]))}const E=i(l,[["render",h]]);export{c as __pageData,E as default};
